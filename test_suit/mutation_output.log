[*] Start mutation process:
   - targets: isTriangle
   - tests: test_mutationAdequate
[*] 9 tests passed:
   - test_mutationAdequate [0.00031 s]
[*] Start mutants generation and execution:
   - [#   1] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a - b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00864 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#   2] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a - c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00848 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#   3] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b - c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00833 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#   4] AOR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian >= 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a - b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00827 s] killed by test_isosceles (test_mutationAdequate.TriangleTest)
   - [#   5] AOR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a - c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00800 s] killed by test_isosceles (test_mutationAdequate.TriangleTest)
   - [#   6] AOR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b - c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00742 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#   7] ASR isTriangle: 
--------------------------------------------------------------------------------
  23:         
  24:         trian = 0
  25:         
  26:         if a == b:
- 27:             trian += 1
+ 27:             trian -= 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
--------------------------------------------------------------------------------
[0.00713 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#   8] ASR isTriangle: 
--------------------------------------------------------------------------------
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
- 29:             trian += 2
+ 29:             trian -= 2
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
--------------------------------------------------------------------------------
[0.00725 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#   9] ASR isTriangle: 
--------------------------------------------------------------------------------
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
- 31:             trian += 3
+ 31:             trian -= 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00802 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  10] COI isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if not ((a <= 0 or b <= 0 or c <= 0)):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00811 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  11] COI isTriangle: 
--------------------------------------------------------------------------------
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
- 26:         if a == b:
+ 26:         if not (a == b):
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
--------------------------------------------------------------------------------
[0.00752 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  12] COI isTriangle: 
--------------------------------------------------------------------------------
  24:         trian = 0
  25:         
  26:         if a == b:
  27:             trian += 1
- 28:         if a == c:
+ 28:         if not (a == c):
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
--------------------------------------------------------------------------------
[0.00777 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  13] COI isTriangle: 
--------------------------------------------------------------------------------
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
- 30:         if b == c:
+ 30:         if not (b == c):
  31:             trian += 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
--------------------------------------------------------------------------------
[0.01506 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  14] COI isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if not (trian == 0):
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.00808 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  15] COI isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if not ((a + b <= c or a + c <= b or b + c <= a)):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00872 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  16] COI isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian >= 6:
+ 39:         if not (trian >= 6):
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.00778 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  17] COI isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian >= 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if not ((trian == 1 and a + b > c)):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.01938 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  18] COI isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif not ((trian == 2 and a + c > b)):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00793 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  19] COI isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif not ((trian == 3 and b + c > a)):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00749 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  20] CRP isTriangle: 
--------------------------------------------------------------------------------
   6:     An implementation that classifies triangles.
   7:     '''
   8:     
   9:     class Type(Enum):
- 10:         INVALID = 0
+ 10:         INVALID = 1
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
--------------------------------------------------------------------------------
[0.00777 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  21] CRP isTriangle: 
--------------------------------------------------------------------------------
   7:     '''
   8:     
   9:     class Type(Enum):
  10:         INVALID = 0
- 11:         SCALENE = 1
+ 11:         SCALENE = 2
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
  15:     @staticmethod
--------------------------------------------------------------------------------
[0.00852 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  22] CRP isTriangle: 
--------------------------------------------------------------------------------
   8:     
   9:     class Type(Enum):
  10:         INVALID = 0
  11:         SCALENE = 1
- 12:         EQUILATERAL = 2
+ 12:         EQUILATERAL = 3
  13:         ISOSCELES = 3
  14:     
  15:     @staticmethod
  16:     def classify(a, b, c):
--------------------------------------------------------------------------------
[0.00828 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  23] CRP isTriangle: 
--------------------------------------------------------------------------------
   9:     class Type(Enum):
  10:         INVALID = 0
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
- 13:         ISOSCELES = 3
+ 13:         ISOSCELES = 4
  14:     
  15:     @staticmethod
  16:     def classify(a, b, c):
  17:         '''
--------------------------------------------------------------------------------
[0.00880 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  24] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 1 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00956 s] survived
   - [#  25] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 1 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00910 s] survived
   - [#  26] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c <= 1):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00814 s] survived
   - [#  27] CRP isTriangle: 
--------------------------------------------------------------------------------
  20:         '''
  21:         if (a <= 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
- 24:         trian = 0
+ 24:         trian = 1
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
--------------------------------------------------------------------------------
[0.00748 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  28] CRP isTriangle: 
--------------------------------------------------------------------------------
  23:         
  24:         trian = 0
  25:         
  26:         if a == b:
- 27:             trian += 1
+ 27:             trian += 2
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
--------------------------------------------------------------------------------
[0.00644 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  29] CRP isTriangle: 
--------------------------------------------------------------------------------
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
- 29:             trian += 2
+ 29:             trian += 3
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
--------------------------------------------------------------------------------
[0.00645 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  30] CRP isTriangle: 
--------------------------------------------------------------------------------
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
- 31:             trian += 3
+ 31:             trian += 4
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00622 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  31] CRP isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if trian == 1:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.00785 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  32] CRP isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian >= 6:
+ 39:         if trian >= 7:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.01055 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  33] CRP isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian >= 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 2 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.01128 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  34] CRP isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 3 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00749 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  35] CRP isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 4 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00725 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  36] DDL isTriangle: 
--------------------------------------------------------------------------------
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
- 15:     @staticmethod
- 16:     def classify(a, b, c):
+ 15:     def classify(\
+ 16:         a, b, c):
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
--------------------------------------------------------------------------------
[0.00729 s] killed by test_static (test_mutationAdequate.TriangleTest)
   - [#  37] LCR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 and b <= 0 and c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00658 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  38] LCR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c and a + c <= b and b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00711 s] killed by test_invalid2 (test_mutationAdequate.TriangleTest)
   - [#  39] LCR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian >= 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 or a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00623 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  40] LCR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 or a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00624 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  41] LCR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 or b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00624 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  42] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a >= 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00660 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  43] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a < 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00618 s] killed by test_zero_condition (test_mutationAdequate.TriangleTest)
   - [#  44] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b >= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00609 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  45] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b < 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00742 s] killed by test_zero_condition (test_mutationAdequate.TriangleTest)
   - [#  46] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c >= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00659 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  47] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c < 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00658 s] killed by test_zero_condition (test_mutationAdequate.TriangleTest)
   - [#  48] ROR isTriangle: 
--------------------------------------------------------------------------------
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
- 26:         if a == b:
+ 26:         if a != b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
--------------------------------------------------------------------------------
[0.00757 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  49] ROR isTriangle: 
--------------------------------------------------------------------------------
  24:         trian = 0
  25:         
  26:         if a == b:
  27:             trian += 1
- 28:         if a == c:
+ 28:         if a != c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
--------------------------------------------------------------------------------
[0.00827 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  50] ROR isTriangle: 
--------------------------------------------------------------------------------
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
- 30:         if b == c:
+ 30:         if b != c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
--------------------------------------------------------------------------------
[0.00714 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  51] ROR isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if trian != 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.00766 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  52] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b >= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00666 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  53] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b < c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00657 s] killed by test_invalid2 (test_mutationAdequate.TriangleTest)
   - [#  54] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c >= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00716 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  55] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c < b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00840 s] killed by test_invalid2 (test_mutationAdequate.TriangleTest)
   - [#  56] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b + c >= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00823 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  57] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b + c < a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00729 s] killed by test_invalid2 (test_mutationAdequate.TriangleTest)
   - [#  58] ROR isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian >= 6:
+ 39:         if trian <= 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.01514 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  59] ROR isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian >= 6:
+ 39:         if trian > 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.00820 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  60] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian >= 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian != 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00682 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  61] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian >= 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a + b < c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00658 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  62] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian >= 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a + b >= c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00662 s] survived
   - [#  63] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian != 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00743 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  64] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a + c < b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00685 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  65] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a + c >= b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.01462 s] survived
   - [#  66] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian != 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00722 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  67] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b + c < a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00581 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  68] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b + c >= a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00552 s] survived
[*] Mutation score [1.55659 s]: 91.2%
   - all: 68
   - killed: 62 (91.2%)
   - survived: 6 (8.8%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
[*] Start mutation process:
   - targets: isTriangle
   - tests: test_mutationAdequate
[*] 9 tests passed:
   - test_mutationAdequate [0.00028 s]
[*] Start mutants generation and execution:
   - [#   1] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a - b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00859 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#   2] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a - c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00889 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#   3] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b - c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00630 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#   4] AOR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian >= 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a - b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00635 s] killed by test_isosceles (test_mutationAdequate.TriangleTest)
   - [#   5] AOR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a - c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00581 s] killed by test_isosceles (test_mutationAdequate.TriangleTest)
   - [#   6] AOR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b - c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00599 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#   7] ASR isTriangle: 
--------------------------------------------------------------------------------
  23:         
  24:         trian = 0
  25:         
  26:         if a == b:
- 27:             trian += 1
+ 27:             trian -= 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
--------------------------------------------------------------------------------
[0.00603 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#   8] ASR isTriangle: 
--------------------------------------------------------------------------------
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
- 29:             trian += 2
+ 29:             trian -= 2
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
--------------------------------------------------------------------------------
[0.00572 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#   9] ASR isTriangle: 
--------------------------------------------------------------------------------
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
- 31:             trian += 3
+ 31:             trian -= 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00587 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  10] COI isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if not ((a <= 0 or b <= 0 or c <= 0)):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00587 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  11] COI isTriangle: 
--------------------------------------------------------------------------------
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
- 26:         if a == b:
+ 26:         if not (a == b):
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
--------------------------------------------------------------------------------
[0.00598 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  12] COI isTriangle: 
--------------------------------------------------------------------------------
  24:         trian = 0
  25:         
  26:         if a == b:
  27:             trian += 1
- 28:         if a == c:
+ 28:         if not (a == c):
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
--------------------------------------------------------------------------------
[0.00583 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  13] COI isTriangle: 
--------------------------------------------------------------------------------
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
- 30:         if b == c:
+ 30:         if not (b == c):
  31:             trian += 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
--------------------------------------------------------------------------------
[0.00575 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  14] COI isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if not (trian == 0):
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.00558 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  15] COI isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if not ((a + b <= c or a + c <= b or b + c <= a)):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00611 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  16] COI isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian >= 6:
+ 39:         if not (trian >= 6):
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.00573 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  17] COI isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian >= 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if not ((trian == 1 and a + b > c)):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00619 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  18] COI isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif not ((trian == 2 and a + c > b)):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00597 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  19] COI isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif not ((trian == 3 and b + c > a)):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00636 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  20] CRP isTriangle: 
--------------------------------------------------------------------------------
   6:     An implementation that classifies triangles.
   7:     '''
   8:     
   9:     class Type(Enum):
- 10:         INVALID = 0
+ 10:         INVALID = 1
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
--------------------------------------------------------------------------------
[0.00575 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  21] CRP isTriangle: 
--------------------------------------------------------------------------------
   7:     '''
   8:     
   9:     class Type(Enum):
  10:         INVALID = 0
- 11:         SCALENE = 1
+ 11:         SCALENE = 2
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
  15:     @staticmethod
--------------------------------------------------------------------------------
[0.00573 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  22] CRP isTriangle: 
--------------------------------------------------------------------------------
   8:     
   9:     class Type(Enum):
  10:         INVALID = 0
  11:         SCALENE = 1
- 12:         EQUILATERAL = 2
+ 12:         EQUILATERAL = 3
  13:         ISOSCELES = 3
  14:     
  15:     @staticmethod
  16:     def classify(a, b, c):
--------------------------------------------------------------------------------
[0.00653 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  23] CRP isTriangle: 
--------------------------------------------------------------------------------
   9:     class Type(Enum):
  10:         INVALID = 0
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
- 13:         ISOSCELES = 3
+ 13:         ISOSCELES = 4
  14:     
  15:     @staticmethod
  16:     def classify(a, b, c):
  17:         '''
--------------------------------------------------------------------------------
[0.00579 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  24] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 1 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00573 s] survived
   - [#  25] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 1 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00606 s] survived
   - [#  26] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c <= 1):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01724 s] survived
   - [#  27] CRP isTriangle: 
--------------------------------------------------------------------------------
  20:         '''
  21:         if (a <= 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
- 24:         trian = 0
+ 24:         trian = 1
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
--------------------------------------------------------------------------------
[0.00759 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  28] CRP isTriangle: 
--------------------------------------------------------------------------------
  23:         
  24:         trian = 0
  25:         
  26:         if a == b:
- 27:             trian += 1
+ 27:             trian += 2
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
--------------------------------------------------------------------------------
[0.00621 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  29] CRP isTriangle: 
--------------------------------------------------------------------------------
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
- 29:             trian += 2
+ 29:             trian += 3
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
--------------------------------------------------------------------------------
[0.00574 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  30] CRP isTriangle: 
--------------------------------------------------------------------------------
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
- 31:             trian += 3
+ 31:             trian += 4
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00638 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  31] CRP isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if trian == 1:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.00602 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  32] CRP isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian >= 6:
+ 39:         if trian >= 7:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.00620 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  33] CRP isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian >= 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 2 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00622 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  34] CRP isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 3 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00697 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  35] CRP isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 4 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00588 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  36] DDL isTriangle: 
--------------------------------------------------------------------------------
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
- 15:     @staticmethod
- 16:     def classify(a, b, c):
+ 15:     def classify(\
+ 16:         a, b, c):
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
--------------------------------------------------------------------------------
[0.00618 s] killed by test_static (test_mutationAdequate.TriangleTest)
   - [#  37] LCR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 and b <= 0 and c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00646 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  38] LCR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c and a + c <= b and b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00614 s] killed by test_invalid2 (test_mutationAdequate.TriangleTest)
   - [#  39] LCR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian >= 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 or a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00617 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  40] LCR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 or a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00604 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  41] LCR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 or b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00604 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  42] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a >= 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00592 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  43] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a < 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00642 s] killed by test_zero_condition (test_mutationAdequate.TriangleTest)
   - [#  44] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b >= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00597 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  45] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b < 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00617 s] killed by test_zero_condition (test_mutationAdequate.TriangleTest)
   - [#  46] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c >= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00642 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  47] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c < 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00644 s] killed by test_zero_condition (test_mutationAdequate.TriangleTest)
   - [#  48] ROR isTriangle: 
--------------------------------------------------------------------------------
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
- 26:         if a == b:
+ 26:         if a != b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
--------------------------------------------------------------------------------
[0.00612 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  49] ROR isTriangle: 
--------------------------------------------------------------------------------
  24:         trian = 0
  25:         
  26:         if a == b:
  27:             trian += 1
- 28:         if a == c:
+ 28:         if a != c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
--------------------------------------------------------------------------------
[0.00606 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  50] ROR isTriangle: 
--------------------------------------------------------------------------------
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
- 30:         if b == c:
+ 30:         if b != c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
--------------------------------------------------------------------------------
[0.00596 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  51] ROR isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if trian != 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.00658 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  52] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b >= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00877 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  53] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b < c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00636 s] killed by test_invalid2 (test_mutationAdequate.TriangleTest)
   - [#  54] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c >= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00590 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  55] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c < b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00641 s] killed by test_invalid2 (test_mutationAdequate.TriangleTest)
   - [#  56] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b + c >= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00611 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  57] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b + c < a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00634 s] killed by test_invalid2 (test_mutationAdequate.TriangleTest)
   - [#  58] ROR isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian >= 6:
+ 39:         if trian <= 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.00678 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  59] ROR isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian >= 6:
+ 39:         if trian > 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.00644 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  60] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian >= 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian != 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00593 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  61] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian >= 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a + b < c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00613 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  62] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian >= 6:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a + b >= c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00595 s] survived
   - [#  63] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian != 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00666 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  64] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a + c < b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.01029 s] killed by test_invalid3 (test_mutationAdequate.TriangleTest)
   - [#  65] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a + c >= b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00605 s] survived
   - [#  66] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian != 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00716 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  67] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b + c < a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00717 s] killed by test_enum (test_mutationAdequate.TriangleTest)
   - [#  68] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b + c >= a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         
  50:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00698 s] survived
[*] Mutation score [1.73462 s]: 91.2%
   - all: 68
   - killed: 62 (91.2%)
   - survived: 6 (8.8%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
